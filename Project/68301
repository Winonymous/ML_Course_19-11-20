{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Project\n",
    "\n",
    "In this project, our aim is to building a model for predicting wine qualities. Our label will be `quality` column. Do not forget, this is a Classification problem!\n",
    "\n",
    "## Steps\n",
    "- Read the `winequality.csv` file and describe it.\n",
    "- Make at least 4 different analysis on Exploratory Data Analysis section.\n",
    "- Pre-process the dataset to get ready for ML application. (Check missing data and handle them, can we need to do scaling or feature extraction etc.)\n",
    "- Define appropriate evaluation metric for our case (classification).\n",
    "- Train and evaluate Decision Trees and at least 2 different appropriate algorithm which you can choose from scikit-learn library.\n",
    "- Is there any overfitting and underfitting? Interpret your results and try to overcome if there is any problem in a new section.\n",
    "- Create confusion metrics for each algorithm and display Accuracy, Recall, Precision and F1-Score values.\n",
    "- Analyse and compare results of 3 algorithms.\n",
    "- Select best performing model based on evaluation metric you chose on test dataset.\n",
    "\n",
    "\n",
    "Good luck :)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h2>Your Name</h2>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>fixed acidity</th>\n",
       "      <th>volatile acidity</th>\n",
       "      <th>citric acid</th>\n",
       "      <th>residual sugar</th>\n",
       "      <th>chlorides</th>\n",
       "      <th>free sulfur dioxide</th>\n",
       "      <th>total sulfur dioxide</th>\n",
       "      <th>density</th>\n",
       "      <th>pH</th>\n",
       "      <th>sulphates</th>\n",
       "      <th>alcohol</th>\n",
       "      <th>quality</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7.4</td>\n",
       "      <td>0.700</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.9</td>\n",
       "      <td>0.076</td>\n",
       "      <td>11.0</td>\n",
       "      <td>34.0</td>\n",
       "      <td>0.99780</td>\n",
       "      <td>3.51</td>\n",
       "      <td>0.56</td>\n",
       "      <td>9.4</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>7.8</td>\n",
       "      <td>0.880</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.6</td>\n",
       "      <td>0.098</td>\n",
       "      <td>25.0</td>\n",
       "      <td>67.0</td>\n",
       "      <td>0.99680</td>\n",
       "      <td>3.20</td>\n",
       "      <td>0.68</td>\n",
       "      <td>9.8</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7.8</td>\n",
       "      <td>0.760</td>\n",
       "      <td>0.04</td>\n",
       "      <td>2.3</td>\n",
       "      <td>0.092</td>\n",
       "      <td>15.0</td>\n",
       "      <td>54.0</td>\n",
       "      <td>0.99700</td>\n",
       "      <td>3.26</td>\n",
       "      <td>0.65</td>\n",
       "      <td>9.8</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>11.2</td>\n",
       "      <td>0.280</td>\n",
       "      <td>0.56</td>\n",
       "      <td>1.9</td>\n",
       "      <td>0.075</td>\n",
       "      <td>17.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>0.99800</td>\n",
       "      <td>3.16</td>\n",
       "      <td>0.58</td>\n",
       "      <td>9.8</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>7.4</td>\n",
       "      <td>0.700</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.9</td>\n",
       "      <td>0.076</td>\n",
       "      <td>11.0</td>\n",
       "      <td>34.0</td>\n",
       "      <td>0.99780</td>\n",
       "      <td>3.51</td>\n",
       "      <td>0.56</td>\n",
       "      <td>9.4</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1594</th>\n",
       "      <td>6.2</td>\n",
       "      <td>0.600</td>\n",
       "      <td>0.08</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.090</td>\n",
       "      <td>32.0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>0.99490</td>\n",
       "      <td>3.45</td>\n",
       "      <td>0.58</td>\n",
       "      <td>10.5</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1595</th>\n",
       "      <td>5.9</td>\n",
       "      <td>0.550</td>\n",
       "      <td>0.10</td>\n",
       "      <td>2.2</td>\n",
       "      <td>0.062</td>\n",
       "      <td>39.0</td>\n",
       "      <td>51.0</td>\n",
       "      <td>0.99512</td>\n",
       "      <td>3.52</td>\n",
       "      <td>0.76</td>\n",
       "      <td>11.2</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1596</th>\n",
       "      <td>6.3</td>\n",
       "      <td>0.510</td>\n",
       "      <td>0.13</td>\n",
       "      <td>2.3</td>\n",
       "      <td>0.076</td>\n",
       "      <td>29.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>0.99574</td>\n",
       "      <td>3.42</td>\n",
       "      <td>0.75</td>\n",
       "      <td>11.0</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1597</th>\n",
       "      <td>5.9</td>\n",
       "      <td>0.645</td>\n",
       "      <td>0.12</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.075</td>\n",
       "      <td>32.0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>0.99547</td>\n",
       "      <td>3.57</td>\n",
       "      <td>0.71</td>\n",
       "      <td>10.2</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1598</th>\n",
       "      <td>6.0</td>\n",
       "      <td>0.310</td>\n",
       "      <td>0.47</td>\n",
       "      <td>3.6</td>\n",
       "      <td>0.067</td>\n",
       "      <td>18.0</td>\n",
       "      <td>42.0</td>\n",
       "      <td>0.99549</td>\n",
       "      <td>3.39</td>\n",
       "      <td>0.66</td>\n",
       "      <td>11.0</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1599 rows Ã— 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      fixed acidity  volatile acidity  citric acid  residual sugar  chlorides  \\\n",
       "0               7.4             0.700         0.00             1.9      0.076   \n",
       "1               7.8             0.880         0.00             2.6      0.098   \n",
       "2               7.8             0.760         0.04             2.3      0.092   \n",
       "3              11.2             0.280         0.56             1.9      0.075   \n",
       "4               7.4             0.700         0.00             1.9      0.076   \n",
       "...             ...               ...          ...             ...        ...   \n",
       "1594            6.2             0.600         0.08             2.0      0.090   \n",
       "1595            5.9             0.550         0.10             2.2      0.062   \n",
       "1596            6.3             0.510         0.13             2.3      0.076   \n",
       "1597            5.9             0.645         0.12             2.0      0.075   \n",
       "1598            6.0             0.310         0.47             3.6      0.067   \n",
       "\n",
       "      free sulfur dioxide  total sulfur dioxide  density    pH  sulphates  \\\n",
       "0                    11.0                  34.0  0.99780  3.51       0.56   \n",
       "1                    25.0                  67.0  0.99680  3.20       0.68   \n",
       "2                    15.0                  54.0  0.99700  3.26       0.65   \n",
       "3                    17.0                  60.0  0.99800  3.16       0.58   \n",
       "4                    11.0                  34.0  0.99780  3.51       0.56   \n",
       "...                   ...                   ...      ...   ...        ...   \n",
       "1594                 32.0                  44.0  0.99490  3.45       0.58   \n",
       "1595                 39.0                  51.0  0.99512  3.52       0.76   \n",
       "1596                 29.0                  40.0  0.99574  3.42       0.75   \n",
       "1597                 32.0                  44.0  0.99547  3.57       0.71   \n",
       "1598                 18.0                  42.0  0.99549  3.39       0.66   \n",
       "\n",
       "      alcohol  quality  \n",
       "0         9.4        5  \n",
       "1         9.8        5  \n",
       "2         9.8        5  \n",
       "3         9.8        6  \n",
       "4         9.4        5  \n",
       "...       ...      ...  \n",
       "1594     10.5        5  \n",
       "1595     11.2        6  \n",
       "1596     11.0        6  \n",
       "1597     10.2        5  \n",
       "1598     11.0        6  \n",
       "\n",
       "[1599 rows x 12 columns]"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Read csv\n",
    "data = pd.read_csv(\"winequality.csv\")\n",
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Describe our data for each feature and use .info() for get information about our dataset\n",
    "# Analyse missing values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1599 entries, 0 to 1598\n",
      "Data columns (total 12 columns):\n",
      " #   Column                Non-Null Count  Dtype  \n",
      "---  ------                --------------  -----  \n",
      " 0   fixed acidity         1599 non-null   float64\n",
      " 1   volatile acidity      1599 non-null   float64\n",
      " 2   citric acid           1599 non-null   float64\n",
      " 3   residual sugar        1599 non-null   float64\n",
      " 4   chlorides             1599 non-null   float64\n",
      " 5   free sulfur dioxide   1599 non-null   float64\n",
      " 6   total sulfur dioxide  1599 non-null   float64\n",
      " 7   density               1599 non-null   float64\n",
      " 8   pH                    1599 non-null   float64\n",
      " 9   sulphates             1599 non-null   float64\n",
      " 10  alcohol               1599 non-null   float64\n",
      " 11  quality               1599 non-null   int64  \n",
      "dtypes: float64(11), int64(1)\n",
      "memory usage: 150.0 KB\n"
     ]
    }
   ],
   "source": [
    "data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>fixed acidity</th>\n",
       "      <th>volatile acidity</th>\n",
       "      <th>citric acid</th>\n",
       "      <th>residual sugar</th>\n",
       "      <th>chlorides</th>\n",
       "      <th>free sulfur dioxide</th>\n",
       "      <th>total sulfur dioxide</th>\n",
       "      <th>density</th>\n",
       "      <th>pH</th>\n",
       "      <th>sulphates</th>\n",
       "      <th>alcohol</th>\n",
       "      <th>quality</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1599.000000</td>\n",
       "      <td>1599.000000</td>\n",
       "      <td>1599.000000</td>\n",
       "      <td>1599.000000</td>\n",
       "      <td>1599.000000</td>\n",
       "      <td>1599.000000</td>\n",
       "      <td>1599.000000</td>\n",
       "      <td>1599.000000</td>\n",
       "      <td>1599.000000</td>\n",
       "      <td>1599.000000</td>\n",
       "      <td>1599.000000</td>\n",
       "      <td>1599.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>8.319637</td>\n",
       "      <td>0.527821</td>\n",
       "      <td>0.270976</td>\n",
       "      <td>2.538806</td>\n",
       "      <td>0.087467</td>\n",
       "      <td>15.874922</td>\n",
       "      <td>46.467792</td>\n",
       "      <td>0.996747</td>\n",
       "      <td>3.311113</td>\n",
       "      <td>0.658149</td>\n",
       "      <td>10.422983</td>\n",
       "      <td>5.636023</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.741096</td>\n",
       "      <td>0.179060</td>\n",
       "      <td>0.194801</td>\n",
       "      <td>1.409928</td>\n",
       "      <td>0.047065</td>\n",
       "      <td>10.460157</td>\n",
       "      <td>32.895324</td>\n",
       "      <td>0.001887</td>\n",
       "      <td>0.154386</td>\n",
       "      <td>0.169507</td>\n",
       "      <td>1.065668</td>\n",
       "      <td>0.807569</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>4.600000</td>\n",
       "      <td>0.120000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.900000</td>\n",
       "      <td>0.012000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>0.990070</td>\n",
       "      <td>2.740000</td>\n",
       "      <td>0.330000</td>\n",
       "      <td>8.400000</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>7.100000</td>\n",
       "      <td>0.390000</td>\n",
       "      <td>0.090000</td>\n",
       "      <td>1.900000</td>\n",
       "      <td>0.070000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>22.000000</td>\n",
       "      <td>0.995600</td>\n",
       "      <td>3.210000</td>\n",
       "      <td>0.550000</td>\n",
       "      <td>9.500000</td>\n",
       "      <td>5.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>7.900000</td>\n",
       "      <td>0.520000</td>\n",
       "      <td>0.260000</td>\n",
       "      <td>2.200000</td>\n",
       "      <td>0.079000</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>38.000000</td>\n",
       "      <td>0.996750</td>\n",
       "      <td>3.310000</td>\n",
       "      <td>0.620000</td>\n",
       "      <td>10.200000</td>\n",
       "      <td>6.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>9.200000</td>\n",
       "      <td>0.640000</td>\n",
       "      <td>0.420000</td>\n",
       "      <td>2.600000</td>\n",
       "      <td>0.090000</td>\n",
       "      <td>21.000000</td>\n",
       "      <td>62.000000</td>\n",
       "      <td>0.997835</td>\n",
       "      <td>3.400000</td>\n",
       "      <td>0.730000</td>\n",
       "      <td>11.100000</td>\n",
       "      <td>6.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>15.900000</td>\n",
       "      <td>1.580000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>15.500000</td>\n",
       "      <td>0.611000</td>\n",
       "      <td>72.000000</td>\n",
       "      <td>289.000000</td>\n",
       "      <td>1.003690</td>\n",
       "      <td>4.010000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>14.900000</td>\n",
       "      <td>8.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       fixed acidity  volatile acidity  citric acid  residual sugar  \\\n",
       "count    1599.000000       1599.000000  1599.000000     1599.000000   \n",
       "mean        8.319637          0.527821     0.270976        2.538806   \n",
       "std         1.741096          0.179060     0.194801        1.409928   \n",
       "min         4.600000          0.120000     0.000000        0.900000   \n",
       "25%         7.100000          0.390000     0.090000        1.900000   \n",
       "50%         7.900000          0.520000     0.260000        2.200000   \n",
       "75%         9.200000          0.640000     0.420000        2.600000   \n",
       "max        15.900000          1.580000     1.000000       15.500000   \n",
       "\n",
       "         chlorides  free sulfur dioxide  total sulfur dioxide      density  \\\n",
       "count  1599.000000          1599.000000           1599.000000  1599.000000   \n",
       "mean      0.087467            15.874922             46.467792     0.996747   \n",
       "std       0.047065            10.460157             32.895324     0.001887   \n",
       "min       0.012000             1.000000              6.000000     0.990070   \n",
       "25%       0.070000             7.000000             22.000000     0.995600   \n",
       "50%       0.079000            14.000000             38.000000     0.996750   \n",
       "75%       0.090000            21.000000             62.000000     0.997835   \n",
       "max       0.611000            72.000000            289.000000     1.003690   \n",
       "\n",
       "                pH    sulphates      alcohol      quality  \n",
       "count  1599.000000  1599.000000  1599.000000  1599.000000  \n",
       "mean      3.311113     0.658149    10.422983     5.636023  \n",
       "std       0.154386     0.169507     1.065668     0.807569  \n",
       "min       2.740000     0.330000     8.400000     3.000000  \n",
       "25%       3.210000     0.550000     9.500000     5.000000  \n",
       "50%       3.310000     0.620000    10.200000     6.000000  \n",
       "75%       3.400000     0.730000    11.100000     6.000000  \n",
       "max       4.010000     2.000000    14.900000     8.000000  "
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "fixed acidity           1599\n",
       "volatile acidity        1599\n",
       "citric acid             1599\n",
       "residual sugar          1599\n",
       "chlorides               1599\n",
       "free sulfur dioxide     1599\n",
       "total sulfur dioxide    1599\n",
       "density                 1599\n",
       "pH                      1599\n",
       "sulphates               1599\n",
       "alcohol                 1599\n",
       "quality                 1599\n",
       "dtype: int64"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.isna().count()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Hence there are no null values"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exploratory Data Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>fixed acidity</th>\n",
       "      <th>volatile acidity</th>\n",
       "      <th>citric acid</th>\n",
       "      <th>residual sugar</th>\n",
       "      <th>chlorides</th>\n",
       "      <th>free sulfur dioxide</th>\n",
       "      <th>total sulfur dioxide</th>\n",
       "      <th>density</th>\n",
       "      <th>pH</th>\n",
       "      <th>sulphates</th>\n",
       "      <th>alcohol</th>\n",
       "      <th>quality</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7.4</td>\n",
       "      <td>0.70</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.9</td>\n",
       "      <td>0.076</td>\n",
       "      <td>11.0</td>\n",
       "      <td>34.0</td>\n",
       "      <td>0.9978</td>\n",
       "      <td>3.51</td>\n",
       "      <td>0.56</td>\n",
       "      <td>9.4</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>7.8</td>\n",
       "      <td>0.88</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2.6</td>\n",
       "      <td>0.098</td>\n",
       "      <td>25.0</td>\n",
       "      <td>67.0</td>\n",
       "      <td>0.9968</td>\n",
       "      <td>3.20</td>\n",
       "      <td>0.68</td>\n",
       "      <td>9.8</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7.8</td>\n",
       "      <td>0.76</td>\n",
       "      <td>0.04</td>\n",
       "      <td>2.3</td>\n",
       "      <td>0.092</td>\n",
       "      <td>15.0</td>\n",
       "      <td>54.0</td>\n",
       "      <td>0.9970</td>\n",
       "      <td>3.26</td>\n",
       "      <td>0.65</td>\n",
       "      <td>9.8</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>11.2</td>\n",
       "      <td>0.28</td>\n",
       "      <td>0.56</td>\n",
       "      <td>1.9</td>\n",
       "      <td>0.075</td>\n",
       "      <td>17.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>0.9980</td>\n",
       "      <td>3.16</td>\n",
       "      <td>0.58</td>\n",
       "      <td>9.8</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>7.4</td>\n",
       "      <td>0.70</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1.9</td>\n",
       "      <td>0.076</td>\n",
       "      <td>11.0</td>\n",
       "      <td>34.0</td>\n",
       "      <td>0.9978</td>\n",
       "      <td>3.51</td>\n",
       "      <td>0.56</td>\n",
       "      <td>9.4</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   fixed acidity  volatile acidity  citric acid  residual sugar  chlorides  \\\n",
       "0            7.4              0.70         0.00             1.9      0.076   \n",
       "1            7.8              0.88         0.00             2.6      0.098   \n",
       "2            7.8              0.76         0.04             2.3      0.092   \n",
       "3           11.2              0.28         0.56             1.9      0.075   \n",
       "4            7.4              0.70         0.00             1.9      0.076   \n",
       "\n",
       "   free sulfur dioxide  total sulfur dioxide  density    pH  sulphates  \\\n",
       "0                 11.0                  34.0   0.9978  3.51       0.56   \n",
       "1                 25.0                  67.0   0.9968  3.20       0.68   \n",
       "2                 15.0                  54.0   0.9970  3.26       0.65   \n",
       "3                 17.0                  60.0   0.9980  3.16       0.58   \n",
       "4                 11.0                  34.0   0.9978  3.51       0.56   \n",
       "\n",
       "   alcohol  quality  \n",
       "0      9.4        5  \n",
       "1      9.8        5  \n",
       "2      9.8        5  \n",
       "3      9.8        6  \n",
       "4      9.4        5  "
      ]
     },
     "execution_count": 176,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x24d9be9e2b0>"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Our label Distribution (countplot)\n",
    "sns.countplot(data[\"quality\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This tells me that there are \n",
    "- so many medium quality wines\n",
    "- Only very small high quality wine\n",
    "- Only few low quality wine\n",
    "\n",
    "Hence almost all the wines in this dataset are medium quality"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x24da8582760>"
      ]
     },
     "execution_count": 175,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(data[\"citric acid\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There are so many alchol contains 0 citric acid\n",
    "\n",
    "there are also few alchol with plenty citric acid/"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x24da7656400>"
      ]
     },
     "execution_count": 196,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(data['alcohol'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 192,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x24da7824a60>"
      ]
     },
     "execution_count": 192,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.scatterplot(data['alcohol'],data[\"fixed acidity\"],hue = data[\"quality\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x24d9c660700>"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(data['citric acid'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Preprocessing\n",
    "\n",
    "- Are there any duplicated values?\n",
    "- Do we need to do feature scaling?\n",
    "- Do we need to generate new features?\n",
    "- Split Train and Test dataset. (0.7/0.3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Preprocessing\n",
    "\n",
    "- Are there any duplicated values?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False    1359\n",
       "True      240\n",
       "dtype: int64"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.duplicated().value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Yes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1599"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1359"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_d_d = data.drop_duplicates()\n",
    "len(data_d_d)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Do we need to do feature scaling?\n",
    "\n",
    "Yes because the values are looking quite divergent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>fixed acidity</th>\n",
       "      <th>volatile acidity</th>\n",
       "      <th>citric acid</th>\n",
       "      <th>residual sugar</th>\n",
       "      <th>chlorides</th>\n",
       "      <th>free sulfur dioxide</th>\n",
       "      <th>total sulfur dioxide</th>\n",
       "      <th>density</th>\n",
       "      <th>pH</th>\n",
       "      <th>sulphates</th>\n",
       "      <th>alcohol</th>\n",
       "      <th>quality</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1359.000000</td>\n",
       "      <td>1359.000000</td>\n",
       "      <td>1359.000000</td>\n",
       "      <td>1359.000000</td>\n",
       "      <td>1359.000000</td>\n",
       "      <td>1359.000000</td>\n",
       "      <td>1359.000000</td>\n",
       "      <td>1359.000000</td>\n",
       "      <td>1359.000000</td>\n",
       "      <td>1359.000000</td>\n",
       "      <td>1359.000000</td>\n",
       "      <td>1359.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>8.310596</td>\n",
       "      <td>0.529478</td>\n",
       "      <td>0.272333</td>\n",
       "      <td>2.523400</td>\n",
       "      <td>0.088124</td>\n",
       "      <td>15.893304</td>\n",
       "      <td>46.825975</td>\n",
       "      <td>0.996709</td>\n",
       "      <td>3.309787</td>\n",
       "      <td>0.658705</td>\n",
       "      <td>10.432315</td>\n",
       "      <td>5.623252</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.736990</td>\n",
       "      <td>0.183031</td>\n",
       "      <td>0.195537</td>\n",
       "      <td>1.352314</td>\n",
       "      <td>0.049377</td>\n",
       "      <td>10.447270</td>\n",
       "      <td>33.408946</td>\n",
       "      <td>0.001869</td>\n",
       "      <td>0.155036</td>\n",
       "      <td>0.170667</td>\n",
       "      <td>1.082065</td>\n",
       "      <td>0.823578</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>4.600000</td>\n",
       "      <td>0.120000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.900000</td>\n",
       "      <td>0.012000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>0.990070</td>\n",
       "      <td>2.740000</td>\n",
       "      <td>0.330000</td>\n",
       "      <td>8.400000</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>7.100000</td>\n",
       "      <td>0.390000</td>\n",
       "      <td>0.090000</td>\n",
       "      <td>1.900000</td>\n",
       "      <td>0.070000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>22.000000</td>\n",
       "      <td>0.995600</td>\n",
       "      <td>3.210000</td>\n",
       "      <td>0.550000</td>\n",
       "      <td>9.500000</td>\n",
       "      <td>5.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>7.900000</td>\n",
       "      <td>0.520000</td>\n",
       "      <td>0.260000</td>\n",
       "      <td>2.200000</td>\n",
       "      <td>0.079000</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>38.000000</td>\n",
       "      <td>0.996700</td>\n",
       "      <td>3.310000</td>\n",
       "      <td>0.620000</td>\n",
       "      <td>10.200000</td>\n",
       "      <td>6.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>9.200000</td>\n",
       "      <td>0.640000</td>\n",
       "      <td>0.430000</td>\n",
       "      <td>2.600000</td>\n",
       "      <td>0.091000</td>\n",
       "      <td>21.000000</td>\n",
       "      <td>63.000000</td>\n",
       "      <td>0.997820</td>\n",
       "      <td>3.400000</td>\n",
       "      <td>0.730000</td>\n",
       "      <td>11.100000</td>\n",
       "      <td>6.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>15.900000</td>\n",
       "      <td>1.580000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>15.500000</td>\n",
       "      <td>0.611000</td>\n",
       "      <td>72.000000</td>\n",
       "      <td>289.000000</td>\n",
       "      <td>1.003690</td>\n",
       "      <td>4.010000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>14.900000</td>\n",
       "      <td>8.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       fixed acidity  volatile acidity  citric acid  residual sugar  \\\n",
       "count    1359.000000       1359.000000  1359.000000     1359.000000   \n",
       "mean        8.310596          0.529478     0.272333        2.523400   \n",
       "std         1.736990          0.183031     0.195537        1.352314   \n",
       "min         4.600000          0.120000     0.000000        0.900000   \n",
       "25%         7.100000          0.390000     0.090000        1.900000   \n",
       "50%         7.900000          0.520000     0.260000        2.200000   \n",
       "75%         9.200000          0.640000     0.430000        2.600000   \n",
       "max        15.900000          1.580000     1.000000       15.500000   \n",
       "\n",
       "         chlorides  free sulfur dioxide  total sulfur dioxide      density  \\\n",
       "count  1359.000000          1359.000000           1359.000000  1359.000000   \n",
       "mean      0.088124            15.893304             46.825975     0.996709   \n",
       "std       0.049377            10.447270             33.408946     0.001869   \n",
       "min       0.012000             1.000000              6.000000     0.990070   \n",
       "25%       0.070000             7.000000             22.000000     0.995600   \n",
       "50%       0.079000            14.000000             38.000000     0.996700   \n",
       "75%       0.091000            21.000000             63.000000     0.997820   \n",
       "max       0.611000            72.000000            289.000000     1.003690   \n",
       "\n",
       "                pH    sulphates      alcohol      quality  \n",
       "count  1359.000000  1359.000000  1359.000000  1359.000000  \n",
       "mean      3.309787     0.658705    10.432315     5.623252  \n",
       "std       0.155036     0.170667     1.082065     0.823578  \n",
       "min       2.740000     0.330000     8.400000     3.000000  \n",
       "25%       3.210000     0.550000     9.500000     5.000000  \n",
       "50%       3.310000     0.620000    10.200000     6.000000  \n",
       "75%       3.400000     0.730000    11.100000     6.000000  \n",
       "max       4.010000     2.000000    14.900000     8.000000  "
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_d_d.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Set the y and X\n",
    "\n",
    "y = data_d_d['quality']\n",
    "X = data_d_d.drop(['quality'],axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "scaler = StandardScaler()\n",
    "X_d_scale = pd.DataFrame(scaler.fit_transform(X),columns = X.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>fixed acidity</th>\n",
       "      <th>volatile acidity</th>\n",
       "      <th>citric acid</th>\n",
       "      <th>residual sugar</th>\n",
       "      <th>chlorides</th>\n",
       "      <th>free sulfur dioxide</th>\n",
       "      <th>total sulfur dioxide</th>\n",
       "      <th>density</th>\n",
       "      <th>pH</th>\n",
       "      <th>sulphates</th>\n",
       "      <th>alcohol</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1.359000e+03</td>\n",
       "      <td>1.359000e+03</td>\n",
       "      <td>1.359000e+03</td>\n",
       "      <td>1.359000e+03</td>\n",
       "      <td>1.359000e+03</td>\n",
       "      <td>1.359000e+03</td>\n",
       "      <td>1.359000e+03</td>\n",
       "      <td>1.359000e+03</td>\n",
       "      <td>1.359000e+03</td>\n",
       "      <td>1.359000e+03</td>\n",
       "      <td>1.359000e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>-8.298488e-16</td>\n",
       "      <td>2.740021e-16</td>\n",
       "      <td>-2.385468e-17</td>\n",
       "      <td>-1.286682e-16</td>\n",
       "      <td>1.764593e-16</td>\n",
       "      <td>-1.836075e-16</td>\n",
       "      <td>1.388800e-17</td>\n",
       "      <td>5.210884e-14</td>\n",
       "      <td>-1.386839e-15</td>\n",
       "      <td>-5.865580e-16</td>\n",
       "      <td>2.998174e-17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.000368e+00</td>\n",
       "      <td>1.000368e+00</td>\n",
       "      <td>1.000368e+00</td>\n",
       "      <td>1.000368e+00</td>\n",
       "      <td>1.000368e+00</td>\n",
       "      <td>1.000368e+00</td>\n",
       "      <td>1.000368e+00</td>\n",
       "      <td>1.000368e+00</td>\n",
       "      <td>1.000368e+00</td>\n",
       "      <td>1.000368e+00</td>\n",
       "      <td>1.000368e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>-2.137008e+00</td>\n",
       "      <td>-2.238023e+00</td>\n",
       "      <td>-1.393258e+00</td>\n",
       "      <td>-1.200903e+00</td>\n",
       "      <td>-1.542254e+00</td>\n",
       "      <td>-1.426094e+00</td>\n",
       "      <td>-1.222457e+00</td>\n",
       "      <td>-3.553604e+00</td>\n",
       "      <td>-3.676535e+00</td>\n",
       "      <td>-1.926712e+00</td>\n",
       "      <td>-1.878873e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>-6.972071e-01</td>\n",
       "      <td>-7.623226e-01</td>\n",
       "      <td>-9.328165e-01</td>\n",
       "      <td>-4.611571e-01</td>\n",
       "      <td>-3.671819e-01</td>\n",
       "      <td>-8.515696e-01</td>\n",
       "      <td>-7.433672e-01</td>\n",
       "      <td>-5.935822e-01</td>\n",
       "      <td>-6.438707e-01</td>\n",
       "      <td>-6.371766e-01</td>\n",
       "      <td>-8.619244e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>-2.364707e-01</td>\n",
       "      <td>-5.180013e-02</td>\n",
       "      <td>-6.309377e-02</td>\n",
       "      <td>-2.392334e-01</td>\n",
       "      <td>-1.848432e-01</td>\n",
       "      <td>-1.812915e-01</td>\n",
       "      <td>-2.642772e-01</td>\n",
       "      <td>-4.789431e-03</td>\n",
       "      <td>1.376908e-03</td>\n",
       "      <td>-2.268699e-01</td>\n",
       "      <td>-2.147753e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>5.122260e-01</td>\n",
       "      <td>6.040667e-01</td>\n",
       "      <td>8.066290e-01</td>\n",
       "      <td>5.666484e-02</td>\n",
       "      <td>5.827504e-02</td>\n",
       "      <td>4.889867e-01</td>\n",
       "      <td>4.843008e-01</td>\n",
       "      <td>5.947087e-01</td>\n",
       "      <td>5.820998e-01</td>\n",
       "      <td>4.178978e-01</td>\n",
       "      <td>6.172735e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>4.370894e+00</td>\n",
       "      <td>5.741690e+00</td>\n",
       "      <td>3.722758e+00</td>\n",
       "      <td>9.599383e+00</td>\n",
       "      <td>1.059340e+01</td>\n",
       "      <td>5.372442e+00</td>\n",
       "      <td>7.251446e+00</td>\n",
       "      <td>3.736721e+00</td>\n",
       "      <td>4.518110e+00</td>\n",
       "      <td>7.862034e+00</td>\n",
       "      <td>4.130369e+00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       fixed acidity  volatile acidity   citric acid  residual sugar  \\\n",
       "count   1.359000e+03      1.359000e+03  1.359000e+03    1.359000e+03   \n",
       "mean   -8.298488e-16      2.740021e-16 -2.385468e-17   -1.286682e-16   \n",
       "std     1.000368e+00      1.000368e+00  1.000368e+00    1.000368e+00   \n",
       "min    -2.137008e+00     -2.238023e+00 -1.393258e+00   -1.200903e+00   \n",
       "25%    -6.972071e-01     -7.623226e-01 -9.328165e-01   -4.611571e-01   \n",
       "50%    -2.364707e-01     -5.180013e-02 -6.309377e-02   -2.392334e-01   \n",
       "75%     5.122260e-01      6.040667e-01  8.066290e-01    5.666484e-02   \n",
       "max     4.370894e+00      5.741690e+00  3.722758e+00    9.599383e+00   \n",
       "\n",
       "          chlorides  free sulfur dioxide  total sulfur dioxide       density  \\\n",
       "count  1.359000e+03         1.359000e+03          1.359000e+03  1.359000e+03   \n",
       "mean   1.764593e-16        -1.836075e-16          1.388800e-17  5.210884e-14   \n",
       "std    1.000368e+00         1.000368e+00          1.000368e+00  1.000368e+00   \n",
       "min   -1.542254e+00        -1.426094e+00         -1.222457e+00 -3.553604e+00   \n",
       "25%   -3.671819e-01        -8.515696e-01         -7.433672e-01 -5.935822e-01   \n",
       "50%   -1.848432e-01        -1.812915e-01         -2.642772e-01 -4.789431e-03   \n",
       "75%    5.827504e-02         4.889867e-01          4.843008e-01  5.947087e-01   \n",
       "max    1.059340e+01         5.372442e+00          7.251446e+00  3.736721e+00   \n",
       "\n",
       "                 pH     sulphates       alcohol  \n",
       "count  1.359000e+03  1.359000e+03  1.359000e+03  \n",
       "mean  -1.386839e-15 -5.865580e-16  2.998174e-17  \n",
       "std    1.000368e+00  1.000368e+00  1.000368e+00  \n",
       "min   -3.676535e+00 -1.926712e+00 -1.878873e+00  \n",
       "25%   -6.438707e-01 -6.371766e-01 -8.619244e-01  \n",
       "50%    1.376908e-03 -2.268699e-01 -2.147753e-01  \n",
       "75%    5.820998e-01  4.178978e-01  6.172735e-01  \n",
       "max    4.518110e+00  7.862034e+00  4.130369e+00  "
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_d_scale.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Removing Outlier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 198,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.52443096, 0.93200015, 1.39325797, ..., 1.29187216, 0.57856134,\n",
       "        0.95437429],\n",
       "       [0.29406274, 1.91580043, 1.39325797, ..., 0.70839548, 0.12482157,\n",
       "        0.5845748 ],\n",
       "       [0.29406274, 1.25993358, 1.18861732, ..., 0.32124691, 0.05102416,\n",
       "        0.5845748 ],\n",
       "       ...,\n",
       "       [1.38831178, 0.11216658, 0.88165635, ..., 1.35639693, 0.59374351,\n",
       "        0.7097234 ],\n",
       "       [1.38831178, 0.63139451, 0.77933603, ..., 1.67902074, 0.3006673 ,\n",
       "        0.21477532],\n",
       "       [1.33071973, 1.19956712, 1.01126962, ..., 0.51757501, 0.00759108,\n",
       "        0.52482366]])"
      ]
     },
     "execution_count": 198,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from scipy import stats\n",
    "import numpy as np\n",
    "z = np.abs(stats.zscore(X))\n",
    "z"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 238,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "120"
      ]
     },
     "execution_count": 238,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "outliers = list(set(np.where(z > 3)[0]))\n",
    "\n",
    "len(outliers)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 239,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>fixed acidity</th>\n",
       "      <th>volatile acidity</th>\n",
       "      <th>citric acid</th>\n",
       "      <th>residual sugar</th>\n",
       "      <th>chlorides</th>\n",
       "      <th>free sulfur dioxide</th>\n",
       "      <th>total sulfur dioxide</th>\n",
       "      <th>density</th>\n",
       "      <th>pH</th>\n",
       "      <th>sulphates</th>\n",
       "      <th>alcohol</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>-0.524431</td>\n",
       "      <td>0.932000</td>\n",
       "      <td>-1.393258</td>\n",
       "      <td>-0.461157</td>\n",
       "      <td>-0.245623</td>\n",
       "      <td>-0.468554</td>\n",
       "      <td>-0.384050</td>\n",
       "      <td>0.584003</td>\n",
       "      <td>1.291872</td>\n",
       "      <td>-0.578561</td>\n",
       "      <td>-0.954374</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>-0.294063</td>\n",
       "      <td>1.915800</td>\n",
       "      <td>-1.393258</td>\n",
       "      <td>0.056665</td>\n",
       "      <td>0.200094</td>\n",
       "      <td>0.872003</td>\n",
       "      <td>0.604073</td>\n",
       "      <td>0.048737</td>\n",
       "      <td>-0.708395</td>\n",
       "      <td>0.124822</td>\n",
       "      <td>-0.584575</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>-0.294063</td>\n",
       "      <td>1.259934</td>\n",
       "      <td>-1.188617</td>\n",
       "      <td>-0.165259</td>\n",
       "      <td>0.078535</td>\n",
       "      <td>-0.085537</td>\n",
       "      <td>0.214813</td>\n",
       "      <td>0.155790</td>\n",
       "      <td>-0.321247</td>\n",
       "      <td>-0.051024</td>\n",
       "      <td>-0.584575</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>1.664067</td>\n",
       "      <td>-1.363534</td>\n",
       "      <td>1.471711</td>\n",
       "      <td>-0.461157</td>\n",
       "      <td>-0.265883</td>\n",
       "      <td>0.105971</td>\n",
       "      <td>0.394471</td>\n",
       "      <td>0.691057</td>\n",
       "      <td>-0.966495</td>\n",
       "      <td>-0.461331</td>\n",
       "      <td>-0.584575</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>-0.524431</td>\n",
       "      <td>0.713378</td>\n",
       "      <td>-1.393258</td>\n",
       "      <td>-0.535132</td>\n",
       "      <td>-0.265883</td>\n",
       "      <td>-0.277045</td>\n",
       "      <td>-0.204391</td>\n",
       "      <td>0.584003</td>\n",
       "      <td>1.291872</td>\n",
       "      <td>-0.578561</td>\n",
       "      <td>-0.954374</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1234</th>\n",
       "      <td>1354</td>\n",
       "      <td>-0.869983</td>\n",
       "      <td>0.494756</td>\n",
       "      <td>-0.983977</td>\n",
       "      <td>-0.461157</td>\n",
       "      <td>-0.407702</td>\n",
       "      <td>1.159265</td>\n",
       "      <td>-0.264277</td>\n",
       "      <td>-0.106490</td>\n",
       "      <td>0.711149</td>\n",
       "      <td>0.945435</td>\n",
       "      <td>-0.861924</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1235</th>\n",
       "      <td>1355</td>\n",
       "      <td>-1.215536</td>\n",
       "      <td>0.385444</td>\n",
       "      <td>-0.983977</td>\n",
       "      <td>-0.387183</td>\n",
       "      <td>0.038015</td>\n",
       "      <td>1.542281</td>\n",
       "      <td>-0.084619</td>\n",
       "      <td>-0.968269</td>\n",
       "      <td>0.904724</td>\n",
       "      <td>-0.461331</td>\n",
       "      <td>0.062574</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1236</th>\n",
       "      <td>1356</td>\n",
       "      <td>-1.388312</td>\n",
       "      <td>0.112167</td>\n",
       "      <td>-0.881656</td>\n",
       "      <td>-0.239233</td>\n",
       "      <td>-0.529261</td>\n",
       "      <td>2.212559</td>\n",
       "      <td>0.124983</td>\n",
       "      <td>-0.850510</td>\n",
       "      <td>1.356397</td>\n",
       "      <td>0.593744</td>\n",
       "      <td>0.709723</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1237</th>\n",
       "      <td>1357</td>\n",
       "      <td>-1.388312</td>\n",
       "      <td>0.631395</td>\n",
       "      <td>-0.779336</td>\n",
       "      <td>-0.387183</td>\n",
       "      <td>-0.265883</td>\n",
       "      <td>1.542281</td>\n",
       "      <td>-0.084619</td>\n",
       "      <td>-0.663167</td>\n",
       "      <td>1.679021</td>\n",
       "      <td>0.300667</td>\n",
       "      <td>-0.214775</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1238</th>\n",
       "      <td>1358</td>\n",
       "      <td>-1.330720</td>\n",
       "      <td>-1.199567</td>\n",
       "      <td>1.011270</td>\n",
       "      <td>0.796410</td>\n",
       "      <td>-0.427962</td>\n",
       "      <td>0.201725</td>\n",
       "      <td>-0.144505</td>\n",
       "      <td>-0.652461</td>\n",
       "      <td>0.517575</td>\n",
       "      <td>0.007591</td>\n",
       "      <td>0.524824</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1239 rows Ã— 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      index  fixed acidity  volatile acidity  citric acid  residual sugar  \\\n",
       "0         0      -0.524431          0.932000    -1.393258       -0.461157   \n",
       "1         1      -0.294063          1.915800    -1.393258        0.056665   \n",
       "2         2      -0.294063          1.259934    -1.188617       -0.165259   \n",
       "3         3       1.664067         -1.363534     1.471711       -0.461157   \n",
       "4         4      -0.524431          0.713378    -1.393258       -0.535132   \n",
       "...     ...            ...               ...          ...             ...   \n",
       "1234   1354      -0.869983          0.494756    -0.983977       -0.461157   \n",
       "1235   1355      -1.215536          0.385444    -0.983977       -0.387183   \n",
       "1236   1356      -1.388312          0.112167    -0.881656       -0.239233   \n",
       "1237   1357      -1.388312          0.631395    -0.779336       -0.387183   \n",
       "1238   1358      -1.330720         -1.199567     1.011270        0.796410   \n",
       "\n",
       "      chlorides  free sulfur dioxide  total sulfur dioxide   density  \\\n",
       "0     -0.245623            -0.468554             -0.384050  0.584003   \n",
       "1      0.200094             0.872003              0.604073  0.048737   \n",
       "2      0.078535            -0.085537              0.214813  0.155790   \n",
       "3     -0.265883             0.105971              0.394471  0.691057   \n",
       "4     -0.265883            -0.277045             -0.204391  0.584003   \n",
       "...         ...                  ...                   ...       ...   \n",
       "1234  -0.407702             1.159265             -0.264277 -0.106490   \n",
       "1235   0.038015             1.542281             -0.084619 -0.968269   \n",
       "1236  -0.529261             2.212559              0.124983 -0.850510   \n",
       "1237  -0.265883             1.542281             -0.084619 -0.663167   \n",
       "1238  -0.427962             0.201725             -0.144505 -0.652461   \n",
       "\n",
       "            pH  sulphates   alcohol  \n",
       "0     1.291872  -0.578561 -0.954374  \n",
       "1    -0.708395   0.124822 -0.584575  \n",
       "2    -0.321247  -0.051024 -0.584575  \n",
       "3    -0.966495  -0.461331 -0.584575  \n",
       "4     1.291872  -0.578561 -0.954374  \n",
       "...        ...        ...       ...  \n",
       "1234  0.711149   0.945435 -0.861924  \n",
       "1235  0.904724  -0.461331  0.062574  \n",
       "1236  1.356397   0.593744  0.709723  \n",
       "1237  1.679021   0.300667 -0.214775  \n",
       "1238  0.517575   0.007591  0.524824  \n",
       "\n",
       "[1239 rows x 12 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "1239"
      ]
     },
     "execution_count": 239,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_outlied = X_d_scale.drop(outliers,axis = 0).reset_index(drop = False)\n",
    "display(X_outlied)\n",
    "\n",
    "y = np.array(y)\n",
    "y_outlied = y[list(X_outlied[\"index\"])]\n",
    "len(y_outlied)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 240,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x24da76dda90>"
      ]
     },
     "execution_count": 240,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(16, 8))\n",
    "sns.distplot(X_d_scale['residual sugar'])\n",
    "sns.distplot(data['residual sugar'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 241,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X_outlied,y_outlied,train_size = 0.7)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 242,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5    155\n",
       "6    151\n",
       "7     47\n",
       "4     15\n",
       "8      3\n",
       "3      1\n",
       "dtype: int64"
      ]
     },
     "execution_count": 242,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.Series(y_test).value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 243,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5    370\n",
       "6    340\n",
       "7    107\n",
       "4     32\n",
       "8     12\n",
       "3      6\n",
       "dtype: int64"
      ]
     },
     "execution_count": 243,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.Series(y_train).value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# ML Application\n",
    "\n",
    "- Define models.\n",
    "- Fit models.\n",
    "- Evaluate models for both train and test dataset.\n",
    "- Generate Confusion Matrix and scores of Accuracy, Recall, Precision and F1-Score.\n",
    "- Analyse occurrence of overfitting and underfitting. If there is any of them, try to overcome it within a different section."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# ML Application\n",
    "\n",
    "- Define models."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 244,
   "metadata": {},
   "outputs": [],
   "source": [
    "#linear model\n",
    "from sklearn.tree import DecisionTreeClassifier \n",
    "destree = DecisionTreeClassifier()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Fit models."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 245,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeClassifier()"
      ]
     },
     "execution_count": 245,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "destree.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Evaluate models for both train and test dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 246,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.0\n",
      "0.46236559139784944\n"
     ]
    }
   ],
   "source": [
    "print(destree.score(X_train,y_train))\n",
    "print(destree.score(X_test,y_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This is obviously overfitted "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 247,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean training accuracy: 0.4786620530565167\n",
      "Test accuracy: 0.47580645161290325\n"
     ]
    }
   ],
   "source": [
    "destree = DecisionTreeClassifier()\n",
    "from sklearn.model_selection import cross_validate\n",
    "\n",
    "# Cross validate\n",
    "cv = cross_validate(destree,X_train,y_train,cv = 3, n_jobs=-1, return_estimator=True)\n",
    "\n",
    "print(\"Mean training accuracy: {}\".format(np.mean(cv['test_score'])))\n",
    "print(\"Test accuracy: {}\".format(cv[\"estimator\"][0].score(X_test,y_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 248,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 864x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "pred = cv[\"estimator\"][0].predict(X_test)\n",
    "\n",
    "cm = confusion_matrix(y_test, pred)\n",
    "plt.figure(figsize=(12, 8))\n",
    "ax =sns.heatmap(cm)\n",
    "\n",
    "ax.xaxis.set_ticklabels(range(3,9))\n",
    "ax.yaxis.set_ticklabels(range(3,9))\n",
    "ax.set_xlabel('Predicted Labels')\n",
    "ax.set_ylabel('True Labels')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 249,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.47580645161290325\n",
      "Precision: 0.47580645161290325\n",
      "Recall: 0.47580645161290325\n",
      "F1 Score: 0.47580645161290325\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import f1_score, accuracy_score, recall_score, precision_score\n",
    "\n",
    "final_model = cv[\"estimator\"][0]\n",
    "\n",
    "y_pred = final_model.predict(X_test)\n",
    "\n",
    "print(\"Accuracy:\",accuracy_score(y_test,y_pred))\n",
    "print(\"Precision:\",precision_score(y_test,y_pred,average=\"micro\"))\n",
    "print(\"Recall:\",recall_score(y_test,y_pred,average=\"micro\"))\n",
    "print(\"F1 Score:\",f1_score(y_test,y_pred,average=\"micro\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 250,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5    182\n",
       "6    113\n",
       "7     52\n",
       "4     12\n",
       "8     10\n",
       "3      3\n",
       "dtype: int64"
      ]
     },
     "execution_count": 250,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.Series(y_pred).value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 251,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5    155\n",
       "6    151\n",
       "7     47\n",
       "4     15\n",
       "8      3\n",
       "3      1\n",
       "dtype: int64"
      ]
     },
     "execution_count": 251,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.Series(y_test).value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Better model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 252,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean training accuracy: 0.4786620530565167\n",
      "Test accuracy: 0.47580645161290325\n"
     ]
    }
   ],
   "source": [
    "# It seem like the depth is too much so lets change it default from None to 4\n",
    "destree = DecisionTreeClassifier(max_depth= 4)\n",
    "\n",
    "from sklearn.model_selection import cross_validate\n",
    "\n",
    "# Cross validate\n",
    "cv_new_tree = cross_validate(destree,X_train,y_train,cv = 3, n_jobs=-1, return_estimator=True)\n",
    "\n",
    "print(\"Mean training accuracy: {}\".format(np.mean(cv['test_score'])))\n",
    "print(\"Test accuracy: {}\".format(cv[\"estimator\"][0].score(X_test,y_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 253,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "pred = cv_new_tree[\"estimator\"][0].predict(X_test)\n",
    "\n",
    "cm = confusion_matrix(y_test, pred)\n",
    "plt.figure(figsize=(12, 8))\n",
    "ax =sns.heatmap(cm)\n",
    "\n",
    "ax.xaxis.set_ticklabels(range(3,9))\n",
    "ax.yaxis.set_ticklabels(range(3,9))\n",
    "ax.set_xlabel('Predicted Labels')\n",
    "ax.set_ylabel('True Labels')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 254,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.532258064516129\n",
      "Precision: 0.532258064516129\n",
      "Recall: 0.532258064516129\n",
      "F1 Score: 0.532258064516129\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import f1_score, accuracy_score, recall_score, precision_score\n",
    "\n",
    "final_model = cv_new_tree[\"estimator\"][0]\n",
    "\n",
    "y_pred = final_model.predict(X_test)\n",
    "\n",
    "print(\"Accuracy:\",accuracy_score(y_test,y_pred))\n",
    "print(\"Precision:\",precision_score(y_test,y_pred,average=\"micro\"))\n",
    "print(\"Recall:\",recall_score(y_test,y_pred,average=\"micro\"))\n",
    "print(\"F1 Score:\",f1_score(y_test,y_pred,average=\"micro\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "But now it looks alot better"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model 2 \n",
    "Logistic regressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 255,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean training accuracy: 0.5697808535178778\n",
      "Test accuracy: 0.5860215053763441\n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "logreg = LogisticRegression()\n",
    "\n",
    "from sklearn.model_selection import cross_validate\n",
    "\n",
    "# Cross validate\n",
    "cv_log_reg = cross_validate(logreg,X_train,y_train,cv = 3, n_jobs=-1, return_estimator=True)\n",
    "\n",
    "print(\"Mean training accuracy: {}\".format(np.mean(cv_log_reg['test_score'])))\n",
    "print(\"Test accuracy: {}\".format(cv_log_reg[\"estimator\"][0].score(X_test,y_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 256,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "pred = cv_log_reg[\"estimator\"][0].predict(X_test)\n",
    "\n",
    "cm = confusion_matrix(y_test, pred)\n",
    "plt.figure(figsize=(12, 8))\n",
    "ax =sns.heatmap(cm)\n",
    "\n",
    "ax.xaxis.set_ticklabels(range(3,9))\n",
    "ax.yaxis.set_ticklabels(range(3,9))\n",
    "ax.set_xlabel('Predicted Labels')\n",
    "ax.set_ylabel('True Labels')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 257,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.5860215053763441\n",
      "Precision: 0.5860215053763441\n",
      "Recall: 0.5860215053763441\n",
      "F1 Score: 0.5860215053763441\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import f1_score, accuracy_score, recall_score, precision_score\n",
    "\n",
    "final_model = cv_log_reg[\"estimator\"][0]\n",
    "\n",
    "y_pred = final_model.predict(X_test)\n",
    "\n",
    "print(\"Accuracy:\",accuracy_score(y_test,y_pred))\n",
    "print(\"Precision:\",precision_score(y_test,y_pred,average=\"micro\"))\n",
    "print(\"Recall:\",recall_score(y_test,y_pred,average=\"micro\"))\n",
    "print(\"F1 Score:\",f1_score(y_test,y_pred,average=\"micro\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##  Model 3\n",
    "\n",
    "SVM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 258,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean training accuracy: 0.4728950403690888\n",
      "Test accuracy: 0.4650537634408602\n"
     ]
    }
   ],
   "source": [
    "from sklearn.svm import SVC\n",
    "vector  = SVC()\n",
    "\n",
    "from sklearn.model_selection import cross_validate\n",
    "\n",
    "# Cross validate\n",
    "cv_vector = cross_validate(vector,X_train,y_train,cv = 3, n_jobs=-1, return_estimator=True)\n",
    "\n",
    "print(\"Mean training accuracy: {}\".format(np.mean(cv_vector['test_score'])))\n",
    "print(\"Test accuracy: {}\".format(cv_vector[\"estimator\"][0].score(X_test,y_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 259,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "pred = cv_vector[\"estimator\"][0].predict(X_test)\n",
    "\n",
    "cm = confusion_matrix(y_test, pred)\n",
    "plt.figure(figsize=(12, 8))\n",
    "ax =sns.heatmap(cm)\n",
    "\n",
    "ax.xaxis.set_ticklabels(range(3,9))\n",
    "ax.yaxis.set_ticklabels(range(3,9))\n",
    "ax.set_xlabel('Predicted Labels')\n",
    "ax.set_ylabel('True Labels')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 260,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.4650537634408602\n",
      "Precision: 0.4650537634408602\n",
      "Recall: 0.4650537634408602\n",
      "F1 Score: 0.4650537634408602\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import f1_score, accuracy_score, recall_score, precision_score\n",
    "\n",
    "final_model = cv_vector[\"estimator\"][0]\n",
    "\n",
    "y_pred = final_model.predict(X_test)\n",
    "\n",
    "print(\"Accuracy:\",accuracy_score(y_test,y_pred))\n",
    "print(\"Precision:\",precision_score(y_test,y_pred,average=\"micro\"))\n",
    "print(\"Recall:\",recall_score(y_test,y_pred,average=\"micro\"))\n",
    "print(\"F1 Score:\",f1_score(y_test,y_pred,average=\"micro\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Evaluation\n",
    "\n",
    "- Select the best performing model and write your comments about why choose this model.\n",
    "- Analyse results and make comment about how you can improve model.\n",
    "\n",
    "\n",
    "For me the one that gave me the best results was the logistic regressor because the data had a quite linear relationship with each other they were in a cluster of some sort. \n",
    "\n",
    "The model can also be improved by creating new features using EDA and so on"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
